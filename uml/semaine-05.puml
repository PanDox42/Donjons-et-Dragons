@startuml
skinparam backGroundColor Ivory
skinparam linetype ortho
skinparam shadowing true
skinparam groupInheritance 2
skinparam class {
    BackgroundColor LightYellow
    BorderColor MidnightBlue
}

' Packages
package DED {
    package Addon {
        class De {
            - int m_nbDes
            - int m_nbFaces
            --
            + De(int nbDes, int nbFaces)
            + int get_nbDes()
            + int get_nbFaces()
            + int lancer()
            + static int lancer(int nbDes, int nbFaces)
            - static int lancerDes(int nbDes, int nbFaces)
        }

        class Scan {
            - static Scanner scanner
            + static String ScanLine()
            + static boolean demanderChoix()
        }
    }

    package Donjons {
        interface Contenu {
            + String getSymbole()
        }
        class Coordonnee {
            - int m_x
            - int m_y
            --
            + Coordonnee(int x, int y)
            + int getX()
            + int getY()
            + void SetX(int x)
            + void SetY(int y)
        }
        class Donjon {
            - m_mdj : MaitreJeu
            - m_coordonnee : Coordonnee
            - m_donjon_contenu : Contenu[][][]
            - m_contexte : String
            - m_joueurNom : ArrayList<String>
            - m_joueurs : ArrayList<Personnage>
            - m_dicoMonstre : Map<String, Integer>
            - m_monstres : ArrayList<Monstre>

            + Donjon(x: int, y: int, mdj: MaitreJeu)
            + getCoordonnee() : Coordonnee
            + placerObstacle(x: int, y: int, o: Obstacle) : void
            + placerObstaclesAvecConfirmation() : void
            + placerJoueur(x: int, y: int, p: Personnage) : void
            + placerJoueursAvecConfirmation() : void
            + placerMonstre(x: int, y: int, m: Monstre) : void
            + placerMonstresAvecConfirmation() : void
            + placerObjet(x: int, y: int, o: Objet) : void
            + placerObjetsAvecConfirmation() : void
            + afficherCarte() : void
            + deplacerEntite(c: Coordonnee, e: Entite) : void
            + tuerEntite(e: Entite) : void
            + enleverObjet(c: Coordonnee) : void
            + verifierDeplacerContenuValide(c: Contenu, co: Coordonnee) : boolean
            + modifierDonjon(c: Contenu, co: Coordonnee) : void
            + modifierContexte(c: String) : void
            + raconterTourMdj() : String
            + getNombreEspeceMonstre(e: String) : int
            + ajouterEspeceDicoMonstre(e: String) : void
            + getJoueur() : ArrayList<Personnage>
            + equiperObjet() : void
            + quoiAfficher(c: Contenu[]) : String
            + detecterEntiteCase(c: Contenu[]) : boolean
            + static convertirCoordonnnee(s: String) : int[]
        }

        class Jouer {
            + jouer() : void
            - preparerDonjonManuellement() : Donjon
            - preparerDonjonDefault() : Donjon
            + preparer(donjon : Donjon) : Donjon
            + preparerSuite(donjon : Donjon) : Donjon
            - tour(donjon : Donjon, nbTour : int) : void
            - jouerMaitreDuJeu(donjon : Donjon) : void
            - jouerTourPersonnage(donjon : Donjon, personnage : Personnage, numTour : int) : void
            - afficherMenuActionsPersonnage(donjon : Donjon, personnage : Personnage, numTour : int) : void
            - traiterActionPersonnage(donjon : Donjon, personnage : Personnage, choix : int, numTour : int) : boolean
            - jouerTourMonstre(donjon : Donjon, monstre : Monstre) : void
            - demanderCommentaire(auteur : String) : void
        }

        class Obstacle {
            + Coordonnee m_coordonnee
            + Obstacle()
            + String getSymbole()
        }
        class PreparerTour {
          +creerPersonnage(nom: String, race: int, classe: int) : Personnage
          +demanderJoueur(Listjoueur: List<String>) : Personnage
          +creerMonstreDepuisValeurs(numero: int, espece: String, nom: String, attaque: Attaque, caracteristiqueMonstre: CaracteristiqueMonstre) : Monstre
          +creerMonstreDepuisValeurs(numero: int, espece: String, nom: String) : Monstre
          +creerMonstre(donjon: Donjon) : Monstre
          +creerObjetDepuisChoix(type: int, id: int) : Objet
          +creerObjet() : Objet
        }
    }

    package Entites {
        package Caracteristiques {
            class Caracteristique {
                - m_pv : int
                - m_force : int
                - m_dexterite : int
                - m_vitesse : int
                - m_initiative : int

                + Caracteristique(pv : int, force : int, dexterite : int, vitesse : int, initiative : int)
                + static creerCaracteristique(personnage : Personnage) : Caracteristique

                + getPv() : int
                + getForce() : int
                + getDexterite() : int
                + getVitesse() : int
                + getInitiative() : int

                + changerPv(changement : int) : void
                + changerForce(changement : int) : void
                + changerDexterite(changement : int) : void
                + changerVitesse(changement : int) : void
                + changerInitiative(changement : int) : void
            }

            class CaracteristiqueMonstre {
              -m_classeArmure : int
              +CaracteristiqueMonstre(pv: int, force: int, dexterite: int, classeArmure: int, vitesse: int, initiative: int)
              +getClasseArmure() : int
              +changerClasseArmure(changement: int) : void
              +creerCaracteristique() : CaracteristiqueMonstre
              -demanderEntier(message: String) : int
            }
        }

        package Personnages {
            package Classes {
                interface Classe {
                    + getPvDepart() : int
                    + getEquipementDepart() : ArrayList<Objet>
                }
                class Clerc {
                    - pvDepart : int = 16
                    + getPvDepart() : int
                    + getEquipementDepart() : ArrayList<Objet>
                }
                class Guerrier {
                    - pvDepart : int = 20
                    + getPvDepart() : int
                    + getEquipementDepart() : ArrayList<Objet>
                }
                class Magicien {
                    - pvDepart : int = 12
                    + getPvDepart() : int
                    + getEquipementDepart() : ArrayList<Objet>
                }
                class Roublard {
                    - pvDepart : int = 16
                    + getPvDepart() : int
                    + getEquipementDepart() : ArrayList<Objet>
                }
            }

            package Monstres {
                class Attaque {
                    - m_portee : int
                    - m_degat : De
                    + Attaque(portee : int, degat : De)
                    + genererAttaque() : int
                    + creerAttaque() : Attaque {static}
                    + getDeAttaque() : De
                }

                class Monstre {
                    - m_nom : String
                    - m_numero : int
                    - m_espece : String
                    - m_attaque : Attaque
                    - m_caracteristiques : CaracteristiqueMonstre

                    + Monstre(numero : int, espece : String, nom : String)
                    + Monstre(numero : int, espece : String, nom : String, attaque : Attaque)
                    + Monstre(numero : int, espece : String, nom : String, attaque : Attaque, caracteristique : CaracteristiqueMonstre)

                    + Attaquer(perso : Personnage) : void
                    + getNom() : String
                    + diminuerVie(degat : int) : void
                    + getNumero() : int
                    + getEspece() : String
                    + getDeAttaque() : Attaque
                    + getCaracteristique() : CaracteristiqueMonstre
                    + getSymbole() : String
                }
            }

            package Races {
                interface Race {
                    + getRace() : String
                    + getPvAugmente() : int
                    + getForceAugmentee() : int
                    + getDexteriteAugmentee() : int
                    + getVitesseAugmentee() : int
                    + getInitiativeAugmentee() : int
                }
                class Elfe {
                    + getRace() : String
                    + getPvAugmente() : int
                    + getForceAugmentee() : int
                    + getDexteriteAugmentee() : int
                    + getVitesseAugmentee() : int
                    + getInitiativeAugmentee() : int
                }
                class Halfelin {
                    + getRace() : String
                    + getPvAugmente() : int
                    + getForceAugmentee() : int
                    + getDexteriteAugmentee() : int
                    + getVitesseAugmentee() : int
                    + getInitiativeAugmentee() : int
                }
                class Humain {
                    + getRace() : String
                    + getPvAugmente() : int
                    + getForceAugmentee() : int
                    + getDexteriteAugmentee() : int
                    + getVitesseAugmentee() : int
                    + getInitiativeAugmentee() : int
                }
                class Nain {
                    + getRace() : String
                    + getPvAugmente() : int
                    + getForceAugmentee() : int
                    + getDexteriteAugmentee() : int
                    + getVitesseAugmentee() : int
                    + getInitiativeAugmentee() : int
                }
            }

            class MaitreJeu {
              +MaitreJeu()
              +raconterTour() : String
              +creerDonjon() : Donjon
              +creerDonjonParDefaut() : Donjon
              +deplacerEntite(donjon: Donjon) : void
              +infligerDegatsEntite(donjon: Donjon) : void
              +ajouterObstacle(donjon: Donjon) : void
            }

            class Personnage {
                - m_nom : String
                - m_race : Race
                - m_classe : Classe
                - m_caracteristiques : Caracteristique
                - m_inventaire : ArrayList<Objet>

                + Personnage(nom: String, race: Race, classe: Classe)
                + getClasse() : Classe
                + getNom() : String
                + getRace() : Race
                + getCaracteristiques() : Caracteristique
                + getInventaire() : ArrayList<Objet>
                + getArmeEquipe() : Arme
                + getArmureEquipe() : Armure
                + attaquer(monstre: Monstre) : void
                + diminuerVie(degat: int) : void
                + afficherInventaire() : void
                + afficherEquipement() : String
                + afficherSituation() : void
                + sEquiper() : void
                + equiperObjet(num: int) : void
                + getInitiative() : int
                + getType() : String
                + getPortee() : int
                + getSymbole() : String
                + getObjetEquipe() : ArrayList<Objet>
                + ajouterInventaire(objet: Objet) : void
                + recupererObjet(donjon: Donjon, coordonnee: Coordonnee) : void
                + estMort() : boolean
                + getArme() : List<Arme>

                - estAportee(cible: Monstre) : boolean
                - setEquipe(num: int) : void
                - delEquipe(num: int) : void
              }
        }
        abstract class Entite {
            - m_coordonnee : Coordonnee

            + getCoordonnee() : Coordonnee
            + setCoordonnee(x: int, y: int) : void
            + setCoordonnee(coordonnee: Coordonnee) : void
            + seDeplacer(donjon: Donjon) : void

            + getInitiative() : int
            + getPortee() : int
            + getType() : String
            + getNom() : String
            + getSymbole() : String
            + getCaracteristiques() : Caracteristique
          }
    }

    package Objets {
        package Armes {
            package ArmeCourantes {
                abstract class ArmeCourante {
                    # <<protected>> ArmeCourante(String nom, int portee, De deAttaque)
                }
                class Baton {
                    + Baton()
                }
                class MasseArme {
                    + MasseArme()
                }
            }

            package ArmeDistances {
                abstract class ArmeDistance {
                    # <<protected>> ArmeDistance(String nom, int portee, De deAttaque)
                }
                class ArbaleteLegere {
                    + ArbaleteLegere()
                }
                class ArcCourt {
                    + ArcCourt()
                }
                class Fronde {
                    + Fronde()
                }
            }

            package ArmeGuerres {
                abstract class ArmeGuerre {
                    + ArmeGuerre(String nom, int portee, De deAttaque)
                }
                class EpeeLongue {
                    + EpeeLongue()
                }
                class Rapiere {
                    + Rapiere()
                }
                class EpeeDeuxMains {
                    + EpeeDeuxMains()
                  }
            }
            abstract class Arme {
                - int m_porte
                - De m_deAttaque
                + Arme(String nom, int porte, De deAttaque)
                + int getPorte()
                + int getDegat()
                + De getDeAttaque()
                + static Arme sansArme()
            }
            class Poing {
                + Poing()
            }
        }
        package Armures {
            package ArmureLegeres {
                class ArmureEcailles {
                    + ArmureEcailles()
                }
                class ArmureLegere {
                    + ArmureLegere(String nom, int classe)
                }
                class DemiPlate {
                    + DemiPlate()
                }
            }

            package ArmureLourdes {
                class ArmureLourde {
                    + ArmureLourde(String nom, int classe)
                }
                class CotteMailles {
                    + CotteMailles()
                }
                class Harnois {
                    + Harnois()
                }
            }
            abstract class Armure {
                - int m_classeArmure
                + Armure(String nom, int classeArmure)
                + int getClasse()
                + static Armure sansArmure()
            }
            class Nu {
                + Nu()
            }
        }
        abstract class Objet implements Donjons.Contenu {
            - m_nom : String
            - m_coordonnee : Donjons.Coordonnee
            - m_equipe : boolean
            - m_type : String

            + Objet(nom: String, type: String)
            + getNom() : String
            + estEquipe() : boolean
            + getSymbole() : String
            + getCoordonnee() : Donjons.Coordonnee
            + setCoordonnee(c: Donjons.Coordonnee) : void
            + setEquipe() : void
            + setNonEquipe() : void
            + getType() : String
            + setType(type: String) : void
          }
    }

    package Sort {
        class ArmeMagique {
            + lancer(lanceur : Personnage, donjon : Donjon)
          }
        class BoogieWoogie {
            + lancer(lanceur : Personnage, donjon : Donjon)
          }
        class Guerison {
             + lancer(lanceur : Personnage, donjon : Donjon)
           }
        interface Sort {
        }
    }

    class Main {
        + static void main(String[] args)
    }
}

ArmeMagique ..|> Sort
BoogieWoogie ..|> Sort
Guerison ..|> Sort

Jouer ..> MaitreJeu : utilise
Jouer ..> Donjon : utilise
Obstacle ..|> Contenu
CaracteristiqueMonstre --|> Caracteristique

Clerc ..|> Classe
Guerrier ..|> Classe
Magicien ..|> Classe
Roublard ..|> Classe

Monstre --|> Entite
Monstre --> Attaque
Monstre --> CaracteristiqueMonstre
Monstre ..> Personnage : utilise

Elfe ..|> Race
Halfelin ..|> Race
Humain ..|> Race
Nain ..|> Race

Personnage --> Entite
Personnage --> Race
Personnage --> Classe
Personnage --> Caracteristique
Personnage --> Objet : m_inventaire
Personnage --> Arme
Personnage --> Armure
Personnage --> Monstre : attaquer(pasGentil)

Entite ..|> Contenu
Entite --> Coordonnee

Arme --> De
Arme --|> Objet
Poing --|> Arme

ArmeCourante --|> Arme
Baton --|> ArmeCourante
MasseArme --|> ArmeCourante

ArmeDistance --|> Arme
ArbaleteLegere --|> ArmeDistance
ArcCourt --|> ArmeDistance
Fronde --|> ArmeDistance

ArmeGuerre --|> Arme
EpeeLongue --|> ArmeGuerre
Rapiere --|> ArmeGuerre
EpeeDeuxMains --|> ArmeGuerre

Armure --|> Objet
Nu --|> Armure

ArmureLegere --|> Armure
ArmureEcailles --|> ArmureLegere
DemiPlate --|> ArmureLegere

ArmureLourde --|> Armure
CotteMailles --|> ArmureLourde
Harnois --|> ArmureLourde

Objet ..> Coordonnee
Objet ..|> Contenu

@enduml
